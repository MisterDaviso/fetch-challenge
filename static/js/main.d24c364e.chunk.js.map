{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","console","log","site","useState","usersData","setUsersData","postsData","setPostsData","userComps","setUserComps","useEffect","length","requestUsers","buildComponents","fetch","then","response","json","components","map","u","postComps","filter","post","userId","id","p","Typography","variant","title","gutterBottom","body","Divider","Accordion","AccordionSummary","username","AccordionDetails","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAuFeA,MAvEf,WACEC,QAAQC,IAAI,gBAEZ,IAAMC,EAAO,wCAEb,EAAgCC,mBAAS,IAAzC,mBAAKC,EAAL,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAKG,EAAL,KAAgBC,EAAhB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAKK,EAAL,KAAgBC,EAAhB,KAEAC,qBAAU,WACJN,EAAUO,OAAS,EAAGC,IACjBJ,EAAUG,OAAS,IAC1BX,QAAQC,IAAI,+CACZY,KAEFb,QAAQC,IAAIO,KACX,CAACF,EAAWE,IAGf,IAAMI,EAAe,WACnBE,MAAMZ,EAAO,SACVa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACE,GAAD,OAAUZ,EAAaY,MAC/BH,MAAMZ,EAAO,SACVa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACE,GAAD,OAAUV,EAAaU,OAG3BJ,EAAkB,WACtBb,QAAQC,IAAI,uBACZ,IAAIiB,EAAad,EAAUe,KAAI,SAAAC,GAC7B,IACIC,EADQf,EAAUgB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUJ,EAAEK,MAChCN,KAAI,SAAAO,GACxB,OACE,gCACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGF,EAAEG,QAEL,cAACF,EAAA,EAAD,CAAYC,QAAQ,UAAUE,cAAY,EAA1C,SACGJ,EAAEK,OAEL,cAACC,EAAA,EAAD,UAIN,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAkBT,GAAIL,EAAEK,GAAxB,SACE,eAACE,EAAA,EAAD,CAAYC,QAAQ,KAApB,cAA2BR,EAAEe,SAA7B,SAEF,cAACC,EAAA,EAAD,UACGf,UAMTrB,QAAQC,IAAIiB,GACZT,EAAaS,IAGf,OACE,sBAAKmB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,oCAGC7B,MCtEQ8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d24c364e.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport * as React from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport { Divider } from '@mui/material';\n\n/**\n * Ksense Challenge\n * \n * Fetch all the users and their posts\n * Format each user as an accordian that will display their posts\n * @returns \n */\nfunction App() {\n  console.log(\"Entered App.\")\n  \n  const site = \"https://jsonplaceholder.typicode.com/\"\n\n  let [usersData, setUsersData] = useState([])\n  let [postsData, setPostsData] = useState([])\n  let [userComps, setUserComps] = useState([])\n\n  useEffect(() => {\n    if (usersData.length < 1) requestUsers();\n    else if (userComps.length < 1) {\n      console.log(\"Posts daya exists and user comp less than 1\")\n      buildComponents();\n    }\n    console.log(userComps)\n  }, [postsData, userComps])\n\n\n  const requestUsers = () => {\n    fetch(site + \"users\")\n      .then(response => response.json())\n      .then((json) => setUsersData(json))\n    fetch(site + \"posts\")\n      .then(response => response.json())\n      .then((json) => setPostsData(json))\n  }\n\n  const buildComponents = () => {\n    console.log(\"Building Components\")\n    let components = usersData.map(u => {\n      let posts = postsData.filter(post => post.userId == u.id)\n      let postComps = posts.map(p => {\n        return (\n          <div>\n            <Typography variant=\"h6\">\n              {p.title}\n            </Typography>\n            <Typography variant=\"caption\" gutterBottom>\n              {p.body}\n            </Typography>\n            <Divider />\n          </div>\n        )\n      })\n      return (\n        <Accordion>\n          <AccordionSummary id={u.id} >\n            <Typography variant=\"h4\"> {u.username} </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {postComps}\n          </AccordionDetails>\n        </Accordion>\n      )\n    })\n\n    console.log(components)\n    setUserComps(components)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Lars' Ksense Challenge\n      </header>\n      {userComps}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}